[{"/home/a/Documents/react/project1/Todo-reactjs-app-and-notes/src/index.js":"1","/home/a/Documents/react/project1/Todo-reactjs-app-and-notes/src/App.js":"2","/home/a/Documents/react/project1/Todo-reactjs-app-and-notes/src/TodoItem.js":"3","/home/a/Documents/react/project1/Todo-reactjs-app-and-notes/src/Footer.js":"4","/home/a/Documents/react/project1/Todo-reactjs-app-and-notes/src/TodoData.js":"5"},{"size":1430,"mtime":1609193877337,"results":"6","hashOfConfig":"7"},{"size":6095,"mtime":1609234505161,"results":"8","hashOfConfig":"7"},{"size":803,"mtime":1609232399853,"results":"9","hashOfConfig":"7"},{"size":121,"mtime":1609150102351,"results":"10","hashOfConfig":"7"},{"size":275,"mtime":1609189582898,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"1xoys86",{"filePath":"15","messages":"16","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"14"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/a/Documents/react/project1/Todo-reactjs-app-and-notes/src/index.js",[],["24","25"],"/home/a/Documents/react/project1/Todo-reactjs-app-and-notes/src/App.js",["26"],"import React from \"react\"\nimport Footer from './Footer'\nimport TodoItem from \"./TodoItem\"\nimport TodoData from \"./TodoData\"\n// //import ReactDOM from \"react-dom\"\n// function App(){\n//     const todoItems= TodoData.map(item => <TodoItem key={item.id} item={item} />)\n// return (\n//     //Note: can return only one \n//     <div className=\"todo-list\">\n//     {// note do not double declare things}\n//     {/* < TodoItem /> */}\n//     {todoItems}    \n//     < Footer />\n//     </div>\n//     )\n// }\n// Class based\n\n// class App extends React.Component{\n//     yourmethodhere(){\n\n//     }\n//     render(){\n//         //Always include this keyword before whatever you are taking\n//         const style=this.yourmethodhere()\n//         const date =new Date();\n//         return(\n//             <div>\n//                 Your code\n//                 </div>\n//         )\n//     }\n// }\n// class App extends React.Component{\n//     constructor(){\n// super()\n// //bring goodies from whatever you are extending or make them global\n//     this.state = {\n//     answer: \"Yes\"\n//     }\n//     }\n//     render(){\n//         //Always include this keyword before whatever you are taking\n//         const date =new Date();\n//         return(\n//             <div>\n//                 Your code {this.state.answer}\n//                 {/* <ChildComponet answer={this.state.answer} /> */}\n//                </div>\n//         )\n//     }\n// }\n\n// class App extends React.Component{\n//     constructor(){\n//         super()\n//         this.state ={\n//             todos: TodoData,\n//             count: 0\n//         }\n//         this.handleClick=this.handleClick.bind(this)\n//     }\n//     handleClick(){\n//         this.setState(prevState =>{\n//             return{\n//                 count: prevState.count + 1\n//             }\n//         })\n//     }\n//     // componentWillMount(){\n\n//     // }\n//     // componentDidMount(){\n//     //     //Get the data I neeed to corectly display\n//     // }\n//     // componentWillReceiveProps(nextProps){\n//     //     if (nextProps.whatever) !== this.props.whatever ){\n//     //         //do something important\n//     //     }\n//     // }\n//     // shouldComponentUpdate(nextProps, nextState){\n//     //     //return true if want it to update\n//     //     //return false if not\n//     // }\n//     // componentWillUnmount(){\n//     //     //teardown or cleanup your codebefore your component disappear\n//     // }\n\n//         render(){\n//             const todoItems= TodoData.map(item => <TodoItem key={item.id} item={item} />)\n//             return(\n//                 <div className=\"todo-list\">\n//                     {todoItems}\n//                     {this.state.count}\n//                     <button \n//                     onClick=\n//                     {this.handleClick}>\n//                         Click here\n//                    </button>\n//                   {/*</div><ChildComponet count={this.state.count}> */}\n//                     </div>\n//             )\n//         }\n// }\n//Login \n// class App extends React.Component {\n//     constructor(){\n//         super()\n//         this.state={\n//             isLocggedin: false\n//         }\n//         this.handleClick=this.handleClick.bind(this)\n//     }\n//     handleClick(){\n//         this.setState(prevState =>\n//             {\n//                 return{\n//                     isLoggedin: !prevState.isLoggedin\n//                 }\n//             })\n//     }\n//     render(){\n//            let buttontext=this.state.isLoggedin?\"Log out\":\"Login\"\n//            return (\n     \n//         <div>\n//             <button onClick={this.handleClick}>{buttontext}</button>\n//         </div>\n//     )\n// }\n// }\n// class App extends React.Component{\n//     constructor(){\n//         super()\n//         this.state ={\n//             todos: TodoData\n//         }\n//         this.handleChange=this.handleChange.bind(this)\n//     }\n\n//     handleChange(id){\n                \n               \n//                 this.setState(prevState =>\n//                 {   //count: prevState.count + 1\n//                     const updatedTodos= prevState.todos.map(todo =>{\n//                         if (todo.id===id){\n//                             todo.completed = ! todo.completed\n//                         }\n//                         return todo;\n                        \n//                 }\n//                 )\n//                 return {\n//                     todos: updatedTodos\n//                 }\n           \n            \n//         })\n//     }\n\n//         render(){\n//             const todoItems= TodoData.map(item => \n//             <TodoItem key={item.id} item={item} \n//             handleChange={this.handleChange} \n//             />)\n//             return(\n//                 <div className=\"todo-list\">\n//                     {todoItems}\n//                     {this.state.count}\n//                     </div>\n//             )\n//         }\n// }\n//Fetching data from api\n\nclass App extends React.Component{\n    constructor(){\n        super()\n        this.state ={\n            todos: TodoData\n        }\n        this.handleChange=this.handleChange.bind(this)\n    }\n\n    handleChange(id){\n                \n               \n                this.setState(prevState =>\n                {   //count: prevState.count + 1\n                    const updatedTodos= prevState.todos.map(todo =>{\n                        if (todo.id===id){\n                            todo.completed = ! todo.completed\n                        }\n                        return todo;\n                        \n                }\n                )\n                return {\n                    todos: updatedTodos\n                }\n           \n            \n        })\n    }\n\n        render(){\n            const todoItems= TodoData.map(item => \n            <TodoItem key={item.id} item={item} \n            handleChange={this.handleChange} \n            />)\n            return(\n                <div className=\"todo-list\">\n                    {todoItems}\n                    {this.state.count}\n                    </div>\n            )\n        }\n}\nexport default App","/home/a/Documents/react/project1/Todo-reactjs-app-and-notes/src/TodoItem.js",[],"/home/a/Documents/react/project1/Todo-reactjs-app-and-notes/src/Footer.js",[],"/home/a/Documents/react/project1/Todo-reactjs-app-and-notes/src/TodoData.js",[],{"ruleId":"27","replacedBy":"28"},{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","severity":1,"message":"32","line":2,"column":8,"nodeType":"33","messageId":"34","endLine":2,"endColumn":14},"no-native-reassign",["35"],"no-negated-in-lhs",["36"],"no-unused-vars","'Footer' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]